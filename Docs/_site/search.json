[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AFFORD",
    "section": "",
    "text": "This site compiles resources for Open Research Data management curated and developed by the Center of Reproducible Science of the University of Zurich for the SwissUniversities project AFFORD: A Framework for Avoiding Open Research Data Dump.\n\n\n\n\n\n\n\nLast edited: Wed Oct 04 16:29:44 2023\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "presentations/Presentations.html",
    "href": "presentations/Presentations.html",
    "title": "Presentations",
    "section": "",
    "text": "Presentations\nCollection of presentations related to AFFORD project\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nOct 4, 2023\n\n\nAFFORD deliverables - ORD Hub\n\n\nG.Fraga Gonzalez\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "reports/Reports.html",
    "href": "reports/Reports.html",
    "title": "Reports",
    "section": "",
    "text": "Reports\nCollection of reports from the AFFORD project\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nOct 4, 2023\n\n\nReport 1 Data Archiving\n\n\nG.Fraga Gonzalez & E. Furrer\n\n\n\n\nOct 4, 2023\n\n\nReport 2 Another test pdf\n\n\nG.Fraga Gonzalez & E. Furrer\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "tutorials/Tutorial-0.-Main-workflow.html",
    "href": "tutorials/Tutorial-0.-Main-workflow.html",
    "title": "A Gitlab workflow to data sharing",
    "section": "",
    "text": "Back\n\nA Gitlab workflow to data sharing\nThe owner of the data (e.g., a lab or a researcher) creates and maintains a main Gitlab repository containing:\n\nMetadata\nData, if applicable, e.g., thumbnail images\nScripts to render an HTML landing site, i.e. the Data Hub, which provides access for collaborators.\nDocumentation associated with those data is collected in the Wiki of the main repository. The markdown files composing the Wiki can be downloaded (they are stored is a separate repository) or they can be directly edited in the browser through the main repository.\n\nThe materials will have three url locations, which can all be accessed through the Data Hub page:\n\nThe Landing page provides the interactive hub and links to the source metadata locations and the documentation.\nThe main repository to access the source metadata tables and data files\nThe Wiki to access all related documentation such as protocols and SOPs. The Wiki is alsa accessible through the main repository.\n\nAny collaborator is given the landing page address and access credentials to it. From there they can access the three urls.\n\n\n\nGitlab_basic\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "tutorials/Tutorial-1.-Using-Gitlab-for-Project-Owners-and-Collaborators.html",
    "href": "tutorials/Tutorial-1.-Using-Gitlab-for-Project-Owners-and-Collaborators.html",
    "title": "Tutorial 1: Using Gitlab for Project Owners and Collaborators",
    "section": "",
    "text": "Back"
  },
  {
    "objectID": "tutorials/Tutorial-1.-Using-Gitlab-for-Project-Owners-and-Collaborators.html#personal-access-token",
    "href": "tutorials/Tutorial-1.-Using-Gitlab-for-Project-Owners-and-Collaborators.html#personal-access-token",
    "title": "Tutorial 1: Using Gitlab for Project Owners and Collaborators",
    "section": "Personal access token",
    "text": "Personal access token\nTo clone a repository to your machine you will most likely need a personal access token (due to the security of SWITCH login). In your project repository on Gitlab.uzh.ch go to Settings/Access tokens. In the Access Tokens menu you will be able to give the token a name, choose an expiration date (or leave it blank), choose permissions (choose at least developer for making edits) and scope (select API). See also the picture below.\n\n\n\nimage\n\n\nAfter this you will see a long alphanumeric string, the token, that you should save somewhere so you can use it as your password later on when using Github-desktop, Git or any other platform to manage local copies of the repositories."
  },
  {
    "objectID": "tutorials/Tutorial-1.-Using-Gitlab-for-Project-Owners-and-Collaborators.html#cloning-with-github-desktop-user-friendly",
    "href": "tutorials/Tutorial-1.-Using-Gitlab-for-Project-Owners-and-Collaborators.html#cloning-with-github-desktop-user-friendly",
    "title": "Tutorial 1: Using Gitlab for Project Owners and Collaborators",
    "section": "2.1 Cloning with Github-desktop (user-friendly)",
    "text": "2.1 Cloning with Github-desktop (user-friendly)\nThe open source tool Github-desktop with a graphical user interface will simplify pull, commit, push operations for both advanced as well as new users. !Note: official support seems to be only for Windows and Mac. See further documentation on integration with Gitlab\n\nSetup of Github-desktop for Gitlab\n\nDownload and install Github desktop\nIn your Gitlab project, get your personal access token (see above) and save it somewhere\nOn Github desktop go to File/Clone repository. Then enter the URL of your Gitlab repository (see the clone button) and a local directory name. For example:\n\nThen you will be asked for username and password. Your username is your Gitlab username (e.g., the name in your email address) and the password is the Token that you just created.\n\nNow your Local folder is linked to your Gitlab remote repository. You can check below how to pull, commit and push changes.\n\n\nEditing repository\nPull,commit and Push changes in the content of the repository. The workflow can get quite complex. Here we will ignore elements like branches to oversimplify it into the main steps:\n\nWork on your local repository, for example, create or edit code, update your metadata table, add new files [^1]\nOpen Github desktop. If you have several repositories, make sure you select the one you are currently working on or the one you want to update. It should detect the local changes done. If there are changes done remotely, but not locally, it willl prompt you to pull those changes (but here, beware there may be conflicts, which you shold be able to solve with Github but may complicate things).\nClick Commit ( you will need to write a brief description, e.g., ‘updated figures’). This will prepare your changes to be sent to the remote repository (‘origin’). If you edited multiple scripts, you can commit all changes at once or select specific scripts\nClick push to origin so that the changes are uploaded.\n\n[^1]: Gitlab is not intended as a large data storage. For the pages in this example we need to have the pictures we want to render in the repository. But sometimes we have many files in our local repository that we do not want to push to the online repository. For that we can use a plain text file in that directory and call it .gitignore . In that file we can have statements like ‘*.jpg’. Then Git will ignore all jpg files in the folder when pushing."
  },
  {
    "objectID": "tutorials/Tutorial-1.-Using-Gitlab-for-Project-Owners-and-Collaborators.html#cloning-with-git",
    "href": "tutorials/Tutorial-1.-Using-Gitlab-for-Project-Owners-and-Collaborators.html#cloning-with-git",
    "title": "Tutorial 1: Using Gitlab for Project Owners and Collaborators",
    "section": "2.2 Cloning with Git",
    "text": "2.2 Cloning with Git\nGit refers to this version control system used in Gitlab, but you can also manage the repositories locally downloading the program Git CSM, a free and open source distributed version control system. It is light and works across operating systems, and also has a very basic graphical interface. But it is mostly designed for working through a terminal. As in Github-desktop you use this to do the main Git actions of pulling, committing and pushing changes between local and remote repositories."
  },
  {
    "objectID": "tutorials/Tutorial-2.-Creating-and-Updating-a-Data-Hub-in-Gitlab.html",
    "href": "tutorials/Tutorial-2.-Creating-and-Updating-a-Data-Hub-in-Gitlab.html",
    "title": "Tutorial 2: Creating and Updating a Data Hub in Gitlab",
    "section": "",
    "text": "Tutorial 2: Creating and Updating a Data Hub in Gitlab\nThe static site generated in this repository shows an interactive table with image thumbnails (clickable). By static we mean that the user will just see whatever data is contained in the HTML of the site. Although it contains an interactive table, all users have access to the same data which they cannot modify (unlike in dynamic websites).\nThe website hosted using Gitlab pages is rendered with an [R Markdown] (https://rmarkdown.rstudio.com/) script, that uses the R DT package). The script creates an interactive page in HTML. Gitlab CI is used to run the R Markdown script automatically at each update (push) and render the site from the browser so that users do not need to install R or other programs to update the site.\n\n\nWorkflow for data owners\n\n\n1. ACTION: Owner edits metadata\nThe owner can do this through:\n\nBrowser (RECOMMENDED FOR MINOR CHANGES) Making changes from Gitlab in the browser (upload or edit file)\nClone repository (RECOMMENDED FOR MAJOR UPDATES) Cloning this repo, working locally and committing and pushing the changes to Gitlab (e.g., using Github desktop). The local metadata file should be always in Sync with that one in the remote repository.\n\nNOTE: The files in the Gitlab repository should be considered as the main source for retrieving your projects’ metadata.\n\n\n2. AUTO: changes in the repository trigger the Continuous Integration pipeline\nIt may take around 5 minutes to update the page html. The member with at least maintainer status can click on Build/Pipelines or Jobs (sidebar in Gitlab) to see what pipeline or job (within pipeline) is running, and if there are any errors.\n\n\n3. AUTO: the continuous integration pipeline runs the script\nThe .gitlab-ci.yml file defines this pipeline. It uses a Docker image with R, Gitlab pages to produce the website, and Gitlab runner to run the Docker where we have our Rmarkdown script (rendering the html from the table). The owner can edit the yml and the Rmarkdown to make if changes in this flow are to be done. No edit of Docker image is needed.\nSee our tutorial on customizing Gitlab Continuous Integration for more advanced details.\n\n\n4. AUTO: The HTML is updated and collaborators can navigate through the updated data\n\n\n\nFiles\nThe main input files are:\n\nmetadata table (preferrably in .csv format for interoperability). It should contain just the filename of the pictures that will be displayed\nimages files (Note: Gitlab is not meant for data storage. Images should be compressed to avoid exceeding volume allowed per repo ( usually 5 Gb in free versions, details here)\nR markdown script that has the code to render the table with DT package\nA .gitlab-ci.yml file is the Continuous integration file that makes it possible to run the Rmd file and render the html again from Gitlab\n\nThe outputs for the website\n\nindex.html file within the public folder\nAn ’ files’ folder will be saved if the table is rendered as self-contained\n\nNote: index.html and images folder ARE EXPECTED to be saved in the public folder. This does not mean they are publicly accessible (you need login to access this site)\n\n\nPrivacy\nThis is a private repository and a private site\n\nAccounts. A SWITCH account is required to access the static website and the repository with the code to generate it\nMembers. A maintainer member in this repository can add new members (Go to Manage/Members). They must be also maintainer to be able to access the images after clicking on the table thumbnail. Guests can only see the thumbnails\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "tutorials/Tutorial-3.-Customizing-Gitlab-Continuous-Integration.html",
    "href": "tutorials/Tutorial-3.-Customizing-Gitlab-Continuous-Integration.html",
    "title": "Tutorial 3: Customizing Gitlab Continuous Integration",
    "section": "",
    "text": "Back"
  },
  {
    "objectID": "tutorials/Tutorial-3.-Customizing-Gitlab-Continuous-Integration.html#the-.gitlab-ci.yml-file",
    "href": "tutorials/Tutorial-3.-Customizing-Gitlab-Continuous-Integration.html#the-.gitlab-ci.yml-file",
    "title": "Tutorial 3: Customizing Gitlab Continuous Integration",
    "section": "The .gitlab-ci.yml file",
    "text": "The .gitlab-ci.yml file\nThis is the file that will define the pipeline which we can run from the browser.\n\nThe first part loads a docker image (similar to a snapshot of a virtual machine).\nThen it defines different stages (deploy is the main, but some tests stages are usually included as well). Sometimes there is a before the script section with some installations (not present in this example).\nThen the main script in this example runs some R code, using the R markdown package, to render the R markdown script named ‘R_interactive_table.Rmd’. In this case the render command outputs the html directly in the public folder. Note the index.html will only be visible if you go to Pipelines/\nGitlab pages expects the output HTML to be saved in a server named public.\n\n\nNote: below we show just an example. The actual file may have change and can be found in the repository.\n\nimage: rocker/verse:4.0.0\npages:\n  stage: deploy\n  script:\n  - R -e \"baseDir &lt;- getwd(); rmarkdown::render('_scripts/R_interactive_table.Rmd', output_file = file.path(baseDir,'public','index.html'))\"\n        \n\n  artifacts:    \n    paths:\n    - public    \n    - public/Images\n    \n  only:\n  - master\n  interruptible: true"
  },
  {
    "objectID": "tutorials/Tutorials.html",
    "href": "tutorials/Tutorials.html",
    "title": "Tutorials",
    "section": "",
    "text": "Tutorials\nPractical tutorials for setting a Gitlab repository for data (and metadata) sharing\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nA Gitlab workflow to data sharing\n\n\n\n\n\n\n\nGitlab\n\n\n\n\n\n\n\n\n\n\n\nOct 4, 2023\n\n\nG.Fraga Gonzalez & E. Furrer\n\n\n\n\n\n\n  \n\n\n\n\nTutorial 1: Using Gitlab for Project Owners and Collaborators\n\n\n\n\n\n\n\nGitlab\n\n\n\n\n\n\n\n\n\n\n\nOct 4, 2023\n\n\nG.Fraga Gonzalez & E. Furrer\n\n\n\n\n\n\n  \n\n\n\n\nTutorial 2: Creating and Updating a Data Hub in Gitlab\n\n\n\n\n\n\n\nGitlab\n\n\n\n\n\n\n\n\n\n\n\nOct 4, 2023\n\n\nG.Fraga Gonzalez & E. Furrer\n\n\n\n\n\n\n  \n\n\n\n\nTutorial 3: Customizing Gitlab Continuous Integration\n\n\n\n\n\n\n\nCode\n\n\nGitlab\n\n\n\n\n\n\n\n\n\n\n\nOct 4, 2023\n\n\nG.Fraga Gonzalez & E. Furrer\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "reports/Reports_1.html",
    "href": "reports/Reports_1.html",
    "title": "Report 1 Data Archiving",
    "section": "",
    "text": "Report 1 Data Archiving\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "reports/Reports_2.html",
    "href": "reports/Reports_2.html",
    "title": "Report 2 Another test pdf",
    "section": "",
    "text": "Report 2 Another test pdf\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "presentations/Presentations_1.html",
    "href": "presentations/Presentations_1.html",
    "title": "AFFORD deliverables - ORD Hub",
    "section": "",
    "text": "Back\n\nAFFORD deliverables - ORD Hub\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "about/About.html",
    "href": "about/About.html",
    "title": "About",
    "section": "",
    "text": "A Framework for Avoiding the Open Research Data Dump.\nThe project AFFORD aims at designing a sustainable support framework to lowers the barriers to publishing data and other research outputs in an accessible form by bundling know-how, workflows, and tools under the umbrella of one organizational entity of the respective Swiss university. It is a collaboration between the InterfaceGroup and the Center for Reproducible Science of the university of Zurich. It uses the Sinergia project Fluid Dynamics of the central nervous system as a reference project and accompanies this project in the full cycle of Open Research Data (ORD) generation from experiment planning to publishing. This project-based, data-driven approach will help the framework reach a sufficient level of maturity before it is made available to all university researchers.\n\n\n\nThe reproducibility of scientific findings is crucial for the credibility of empirical research. The objective of the Center for Reproducible Science is to train the next generation of researchers in good research practices, to develop novel methodology related to reproducibility and replicability, and to improve the quality of scientific investigation using meta-science.\nThe CRS is a competence center supported by the Vice President Research and by the Faculties of Medicine (MeF, leading house), Science (MNF), Business, Economics and Informatics (WWF), Arts and Social Sciences (PhF), Law (RWF), and Vetsuisse Faculty (VSF)."
  },
  {
    "objectID": "about/About.html#the-afford-project",
    "href": "about/About.html#the-afford-project",
    "title": "About",
    "section": "",
    "text": "A Framework for Avoiding the Open Research Data Dump.\nThe project AFFORD aims at designing a sustainable support framework to lowers the barriers to publishing data and other research outputs in an accessible form by bundling know-how, workflows, and tools under the umbrella of one organizational entity of the respective Swiss university. It is a collaboration between the InterfaceGroup and the Center for Reproducible Science of the university of Zurich. It uses the Sinergia project Fluid Dynamics of the central nervous system as a reference project and accompanies this project in the full cycle of Open Research Data (ORD) generation from experiment planning to publishing. This project-based, data-driven approach will help the framework reach a sufficient level of maturity before it is made available to all university researchers."
  },
  {
    "objectID": "about/About.html#the-crs",
    "href": "about/About.html#the-crs",
    "title": "About",
    "section": "",
    "text": "The reproducibility of scientific findings is crucial for the credibility of empirical research. The objective of the Center for Reproducible Science is to train the next generation of researchers in good research practices, to develop novel methodology related to reproducibility and replicability, and to improve the quality of scientific investigation using meta-science.\nThe CRS is a competence center supported by the Vice President Research and by the Faculties of Medicine (MeF, leading house), Science (MNF), Business, Economics and Informatics (WWF), Arts and Social Sciences (PhF), Law (RWF), and Vetsuisse Faculty (VSF)."
  }
]