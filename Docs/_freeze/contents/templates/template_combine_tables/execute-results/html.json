{
  "hash": "c59db67e113fa7c87c19d9f85b8c339d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Table Operations\"\nsubtitle: \"R templates to do frequent table operations\" \ndate: last-modified\ncategories:\n  - Quarto\n  - R\n  - Markdown\n  - YAML\nformat: \n  html:\n    code-tools: true\n    code-copy: true\n---\n\n\n# Template 1 - Combine two Excels by a shared key variable\n\nThis template is based on the following use case. We have one table with **subject information**  with one row per subject and a table with  **scan lists** which has many more rows as subjects have multiple scans. Both tables have a variable identifying the subjects. The subject IDs are common to both tables. We want to combine them and have the list of scans with the subject information in the same table, this means the rows with the subject information will appear multiple times, one for each scan of a given subject. For this we use the function `dplyr::full_join()` \n*(Note: the libraries loaded with `library()` are additional R packages that need to be installed with `install.packages()` before first use)*\n\n> Note. The code in this template is deliberately explicit for the sake of clarity, but it could be made more compact. \n\n:::{.callout-warning }\n\n# Always check the resulting output table! \n \n:::\n \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(openxlsx)\nlibrary(dplyr)\n\n# User inputs\n# -------------\n\ndirinput =                  # folder with files\ndiroutput =                 # output folder to save the files \n\n# Files\nfile_subjects =             # insert filename of table with subject info \nsheet_subjects  =           # insert name of sheet in table\n\nfile_scanlist =             # filename of table with scanlist\nsheet_scanlist  =           # insert name of sheet in table\n\n# missing values definition \nlabels_missing_subjects =c(\"\",\"N/A\") # labels used to specify missing value, first value is always: \"\"\nlabels_missing_scanlist =c(\"\",\"N/A\") \n\n\n# Define columns of interest (key variables: column cell values should be identical across tables)\nsID_subjects =              # name of column identifying subject in subject file\nsID_scans  =                # name of column identifying subject in scan list file \n   \n\n# Read tables \n# ---------------\n\ntbl_subj <- openxlsx::read.xlsx(xlsxFile = file.path(dirinput,file_subjects),\n                               sheet= sheet_subjects, \n                               na.strings =labels_missing_subj)\n                               \nprint(paste0('The table: has ' , nrow(tbl_subj), ' rows and ',ncol(tbl_subj), ' columns'))\n\n# \n\ntbl_scans <- openxlsx::read.xlsx(xlsxFile = file.path(dirinput,file_scanlist),\n                                sheet= sheet_scanlist, \n                                na.strings=labels_missing_scanlist)\n\nprint(paste0('The table : has ' , nrow(tbl_scans), ' rows and ',ncol(tbl_scans), ' columns'))\n\n\n# Join tables \n# ---------------\n\ntbl_joined  <- full_join(x=tbl,\n                         y = tbl_files,\n                         by=join_by(sID_scans==sID_subjects),\n                         keep=FALSE)\n\nprint(paste0('The new table has ' , nrow(tbl_joined), ' rows and ',ncol(tbl_joined), ' columns'))\n\n# Save (specify your own output filename)\n#----- \n openxlsx::write.xlsx(tbl_joined, file = file.path(diroutput,\"table_merged.xlsx\") \n```\n:::\n",
    "supporting": [
      "template_combine_tables_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}