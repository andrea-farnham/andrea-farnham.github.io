url <- "https://www.crs.uzh.ch/en/resources/CRS-Primers.html"
# Send an HTTP GET request to the URL and read the HTML content
response <- GET(url)
html_content <- read_html(content(response, "text"))
# Use rvest to extract all the links and their associated titles from the HTML content
links <- html_nodes(html_content, "a")
links_data <- data.frame(
link = html_attr(links, "href"),
title = html_text(links, "title")
)
# Filter out only the links belonging to doi.org
doi_links <- subset(links_data, str_detect(link, "doi.org"))
# Print the data frame with links and titles belonging to doi.org
print(doi_links)
print(doi_links)
str_replace_all(doi_links$title, "\\s| More about", "")
# Install and load the required packages
#install.packages("rvest")
#install.packages("httr")
#install.packages("stringr")
library(rvest)
library(httr)
library(stringr)
# Specify the URL of the website you want to scrape
url <- "https://www.crs.uzh.ch/en/resources/CRS-Primers.html"
# Send an HTTP GET request to the URL and read the HTML content
response <- GET(url)
html_content <- read_html(content(response, "text"))
# Use rvest to extract all the links and their associated titles from the HTML content
links <- html_nodes(html_content, "a")
links_data <- data.frame(
link = html_attr(links, "href"),
title = html_text(links, "title")
)
# Filter out only the links belonging to doi.org
doi_links <- subset(links_data, str_detect(link, "doi.org"))
# Print the data frame with links and titles belonging to doi.org
#print(doi_links)
doi_links$title <- str_replace_all(doi_links$title, "\\s| More about", "")
print(doi_links)
str_replace_all(doi_links$title, "More about", "")
str_replace_all(doi_links$title, "Moreabout", "")
# Install and load the required packages
#install.packages("rvest")
#install.packages("httr")
#install.packages("stringr")
library(rvest)
library(httr)
library(stringr)
# Specify the URL of the website you want to scrape
url <- "https://www.crs.uzh.ch/en/resources/CRS-Primers.html"
# Send an HTTP GET request to the URL and read the HTML content
response <- GET(url)
html_content <- read_html(content(response, "text"))
# Use rvest to extract all the links and their associated titles from the HTML content
links <- html_nodes(html_content, "a")
links_data <- data.frame(
link = html_attr(links, "href"),
title = html_text(links, "title")
)
# Filter out only the links belonging to doi.org
doi_links <- subset(links_data, str_detect(link, "doi.org"))
# Print the data frame with links and titles belonging to doi.org
#print(doi_links)
doi_links$title <- str_replace_all(doi_links$title, "Moreabout", "")
print(doi_links)
# Install and load the required packages
#install.packages("rvest")
#install.packages("httr")
#install.packages("stringr")
library(rvest)
library(httr)
library(stringr)
# Specify the URL of the website you want to scrape
url <- "https://www.crs.uzh.ch/en/resources/CRS-Primers.html"
# Send an HTTP GET request to the URL and read the HTML content
response <- GET(url)
html_content <- read_html(content(response, "text"))
# Use rvest to extract all the links and their associated titles from the HTML content
links <- html_nodes(html_content, "a")
links_data <- data.frame(
link = html_attr(links, "href"),
title = html_text(links, "title")
)
# Filter out only the links belonging to doi.org
doi_links <- subset(links_data, str_detect(link, "doi.org"))
# Print the data frame with links and titles belonging to doi.org
#print(doi_links)
doi_links$title <- str_replace_all(doi_links$title, "More about", "")
print(doi_links)
# Install and load the required packages
#install.packages("rvest")
#install.packages("httr")
#install.packages("stringr")
library(rvest)
library(httr)
library(stringr)
# Specify the URL of the website you want to scrape
url <- "https://www.crs.uzh.ch/en/resources/CRS-Primers.html"
# Send an HTTP GET request to the URL and read the HTML content
response <- GET(url)
html_content <- read_html(content(response, "text"))
# Use rvest to extract all the links and their associated titles from the HTML content
links <- html_nodes(html_content, "a")
links_data <- data.frame(
link = html_attr(links, "href"),
title = html_text(links, "title")
)
# Filter out only the links belonging to doi.org
doi_links <- subset(links_data, str_detect(link, "doi.org"))
# Print the data frame with links and titles belonging to doi.org
#print(doi_links)
doi_links$title <- str_replace_all(doi_links$title, "\\s|More about", "")
print(doi_links)
quarto::quarto::quarto_render()
quarto::quarto_render()
print(doi_links)
quarto::quarto_render()
quarto::quarto_preview()
img
img <- magick::image_read(file.path(dirinput,fnames[f]))
dirinput <- 'C:/Users/gorka/Gitlab_crs/AFFORD_website/Docs/contents/templates/Data Hub/Images/'
diroutput <- dirinput
img <- magick::image_read(file.path(dirinput,fnames[f]))
fnames <- list.files(dirinput)
f <- 12
img <- magick::image_read(file.path(dirinput,fnames[f]))
img
img
image_map(img)
magick::image_map(img)
magick::image_quantize(img)
f <- 45
img <- magick::image_read(file.path(dirinput,fnames[f]))
img
magick::image_oilpaint(img)
magick::image_oilpaint(img,radius = 23)
magick::image_oilpaint(img,radius = 53)
magick::image_quantize(img, radius = 4)
magick::image_quantize(img, radius = 5)
magick::image_oilpaint(img, radius = 5)
magick::image_rotate(img, radius = 5)
magick::image_rotate(img,degrees = 24)
magick::image_rotate(img,degrees = 90)
require(magick)
rm(list=ls())
dirinput <- 'C:/Users/gorka/Gitlab_crs/AFFORD_website/Docs/contents/templates/Data Hub/Images/'
diroutput <- dirinput
fnames <- list.files(dirinput)
for (f in 1:length(fnames)) {
img <- magick::image_read(file.path(dirinput,fnames[f]))
img <- magick::image_oilpaint(img, radius = 10)
img <- magick::image_rotate(img,degrees = 90)
magick::image_write(img,file.path(diroutput,gsub('.tif','.jpg',fnames[f])), format='jpg')
}
getwd()
dir()
fileinput
dir('contents\*')
dir(pattern = 'contents\Hub\**')
dir(pattern = 'contents/Hub/**')
dir(pattern = '*contents/Hub/**')
dir(pattern = 'contents/Hub/')
dir(path = './contents/Hub/')
tbl <-  readxl::read_excel('DummyData1_20241234_subjects',na=c("","N/A"))
# Minor fix to date-time format
colsWithTime <- colnames(tbl)[grep('*time*',colnames(tbl))] # find variables with
getwd()
tbl <-  readxl::read_excel(file.path('contents','DummyData1_20241234_subjects'),na=c("","N/A"))
tbl <-  readxl::read_excel(file.path('contents','hub','DummyData1_20241234_subjects'),na=c("","N/A"))
tbl <-  readxl::read_excel(file.path(getwd(),'contents','hub','DummyData1_20241234_subjects'),na=c("","N/A"))
tbl <-  readxl::read_excel(file.path(getwd(),'contents','hub','DummyData1_20241234_subjects.xlsx'),na=c("","N/A"))
tbl <-  readxl::read_excel(file.path('DummyData1_20241234_subjects.xlsx'),na=c("","N/A"))
tbl <-  readxl::read_excel('DummyData1_20241234_subjects.xlsx',na=c("","N/A"))
tbl
tbl <-  readxl::read_excel('DummyData1_20241234_subjects.xlsx',na=c("","N/A"))
tbl
colnames(tbl)
tbl <- tbl %>%  mutate(across(all_of(colsWithTime), ~ format(., format = "%H:%M")))
# Minor fix to date-time format
colsWithTime <- colnames(tbl)[grep('*time*',colnames(tbl))] # find variables with
tbl <- tbl %>%  mutate(across(all_of(colsWithTime), ~ format(., format = "%H:%M")))
# Minor fix to date-time format
colsWithTime <- colnames(tbl)[grep('*time*',colnames(tbl))] # find variables with
tbl <- tbl %>%  mutate(across(all_of(colsWithTime), ~ format(., format = "%H:%M")))
library(dplyr)
tbl <-  readxl::read_excel('DummyData1_20241234_subjects.xlsx',na=c("","N/A"))
# Minor fix to date-time format
colsWithTime <- colnames(tbl)[grep('*time*',colnames(tbl))] # find variables with
tbl <- tbl %>%  mutate(across(all_of(colsWithTime), ~ format(., format = "%H:%M")))
tbl
dirinput <- file.path('Images')
# List all files with .jpg extension
files <- dir(dirinput)
extension <- '.jpg'
filenames <- files[grepl(paste0('*',extension,'$'),files)]
filenames
tbl_files <- as.data.frame(filenames)
tbl_files
heead(tbl_files)
head(tbl_files)
sapply(strsplit(filenames,'-'),'[[',1)
sapply(strsplit(filenames,'DS'),'[[',1)
sapply(strsplit(filenames,'-'),'[[',1)
sapply(strsplit(filenames,'-'),'[[',1)[[1]]
sapply(strsplit(filenames,'-'),'[[',1)[[1]]
sapply(strsplit(filenames,'-'),'[[',1)[1]
sapply(strsplit(filenames,'-'),'[[',1)
tbl_filenames$sname <- sapply(strsplit(filenames,'-'),'[[',1)
tbl_files$sname <- sapply(strsplit(filenames,'-'),'[[',1)
tbl_files
View(tbl_files)
tbl
tbl_joined  <- full_join(x=tbl,
y = tbl_files,
by=join_by("Name"=="sname"),
keep=TRUE)
tbl$tbl_joined
tbl_joined
# add paths to filenames + some html code
tbl_joined$pic <- paste0('<a href=\'', pic_fullpath,'\' target=\'_blank\'>',
'<img src=\'',pic_relpath, '\' height=\'70\'></a>')
pic_fullpath <- file.path('https://gitlab.uzh.ch/crsuzh/afford_website/-/tree/master/Docs/contents/hub/Images',tbl_joined$filenames)
pic_relpath <- file.path('.','contents','hub',tbl_joined$filenames)
pic_fullpath <- file.path('https://gitlab.uzh.ch/crsuzh/afford_website/-/tree/master/Docs/contents/hub/Images',tbl_joined$filenames)
pic_relpath <- file.path('.','contents','hub',tbl_joined$filenames)
# add paths to filenames + some html code
tbl_joined$pic <- paste0('<a href=\'', pic_fullpath,'\' target=\'_blank\'>',
'<img src=\'',pic_relpath, '\' height=\'70\'></a>')
tbl_joined
library(crosstalk) # this package makes it possible to filter
# an object that will be shared by filter panels and datatable
shared_joined <- SharedData$new(tbl_joined, key = ~subjID, group = "shared_obj")
# an object that will be shared by filter panels and datatable
shared_joined <- SharedData$new(tbl_joined, key = ~subjID, group = "shared_obj")
# to make two columns one with filter panels and one with the table
bscols(widths = c(2,10),
device = c("xs", "sm", "md", "lg"),
# filter panels. Other formats are sliders and checkboxes https://rstudio.github.io/crosstalk/using.html
list(
filter_select( id = "subjID", label = "subject",sharedData = shared_joined, group = ~subjID),
filter_select( id = "status", label = "status",sharedData = shared_joined, group = ~status),
filter_select( id = "scanID", label = "scan",sharedData = shared_joined, group = ~scanID),
filter_select( id = "desc", label = "description",sharedData = shared_joined, group = ~desc),
filter_checkbox("Sex","Sex",shared_joined, ~Sex, inline = FALSE)
# filter_select(id = "sex", label = "sex",sharedData = shared_joined, ~Sex)
),
# table
datatable(
shared_joined,
#filter = "top",
escape = FALSE,
rownames = FALSE,
width = "100%",
class = 'compact cell-border  hover',
extensions = c('Buttons', 'Select','ColReorder', 'Scroller',  'KeyTable'),
selection = 'none',
options = list(
pageLength = 20,
dom = 'Bfrtip',
#buttons = c('colvis','selectAll', 'selectNone', 'copy', 'csv', 'pdf'),
buttons = list(list(extend = "colvis", text = "select Columns", background='yellow'),
'selectAll', 'selectNone', 'copy', 'csv', 'pdf'),
select = list(style = 'os', items = 'row'),
scrollX = TRUE,
scrollCollapse = FALSE,
autoWidth = TRUE,
colReorder = TRUE,
columnDefs = list(
list(
keys = TRUE,
search = list(regex = TRUE),
targets=0
)
)
)
)
%>%
formatStyle(colnames(tbl),backgroundColor = "ivory")
)
tbl$Name
In short, for the hub you need: (1) a source of structured metadata, i.e., tables (2) if you are to display thumbnails you need the image files (3) some R code to render the table interactive with the package [DT](https://rstudio.github.io/DT/). (4) R Quarto to create the entire page as html
```{r}
library(dplyr)
tbl <-  readxl::read_excel('DummyData1_20241234_subjects.xlsx',na=c("","N/A"))
# Minor fix to date-time format
colsWithTime <- colnames(tbl)[grep('*time*',colnames(tbl))] # find variables with
tbl <- tbl %>%  mutate(across(all_of(colsWithTime), ~ format(., format = "%H:%M")))
```{r}
dirinput <- file.path('Images')
# List all files with .jpg extension
files <- dir(dirinput)
extension <- '.jpg'
filenames <- files[grepl(paste0('*',extension,'$'),files)]
tbl_files <- as.data.frame(filenames)
tbl_files$sname <- sapply(strsplit(filenames,'-'),'[[',1)
tbl_files <- as.data.frame(filenames)
tbl_files$sname <- sapply(strsplit(filenames,'-'),'[[',1)
tbl
tbl_joined
rm(list=ls())
library(dplyr)
library(dplyr)
tbl <-  readxl::read_excel('DummyData1_20241234_subjects.xlsx',na=c("","N/A"))
# Minor fix to date-time format
colsWithTime <- colnames(tbl)[grep('*time*',colnames(tbl))] # find variables with
tbl <- tbl %>%  mutate(across(all_of(colsWithTime), ~ format(., format = "%H:%M")))
library(dplyr)
tbl <-  readxl::read_excel('DummyData1_20241234_subjects.xlsx',na=c("","N/A"))
# Minor fix to date-time format
colsWithTime <- colnames(tbl)[grep('*time*',colnames(tbl))] # find variables with
tbl <- tbl %>%  mutate(across(all_of(colsWithTime), ~ format(., format = "%H:%M")))
dirinput <- file.path('Images')
# List all files with .jpg extension
files <- dir(dirinput)
extension <- '.jpg'
filenames <- files[grepl(paste0('*',extension,'$'),files)]
tbl_files <- as.data.frame(filenames)
tbl_files$sname <- sapply(strsplit(filenames,'-'),'[[',1)
tbl_joined  <- full_join(x=tbl,
y = tbl_files,
by=join_by("subjID"=="sname"),
keep=TRUE)
library(crosstalk) # this package makes it possible to filter
# an object that will be shared by filter panels and datatable
shared_joined <- SharedData$new(tbl_joined, key = ~subjID, group = "shared_obj")
# to make two columns one with filter panels and one with the table
bscols(widths = c(2,10),
device = c("xs", "sm", "md", "lg"),
# filter panels. Other formats are sliders and checkboxes https://rstudio.github.io/crosstalk/using.html
list(
filter_select( id = "subjID", label = "subject",sharedData = shared_joined, group = ~subjID),
filter_select( id = "status", label = "status",sharedData = shared_joined, group = ~status),
filter_checkbox("Sex","Sex",shared_joined, ~Sex, inline = FALSE)
),
# table
datatable(
shared_joined,
#filter = "top",
escape = FALSE,
rownames = FALSE,
width = "100%",
class = 'compact cell-border  hover',
extensions = c('Buttons', 'Select','ColReorder', 'Scroller',  'KeyTable'),
selection = 'none',
options = list(
pageLength = 20,
dom = 'Bfrtip',
#buttons = c('colvis','selectAll', 'selectNone', 'copy', 'csv', 'pdf'),
buttons = list(list(extend = "colvis", text = "select Columns", background='yellow'),
'selectAll', 'selectNone', 'copy', 'csv', 'pdf'),
select = list(style = 'os', items = 'row'),
scrollX = TRUE,
scrollCollapse = FALSE,
autoWidth = TRUE,
colReorder = TRUE,
columnDefs = list(
list(
keys = TRUE,
search = list(regex = TRUE),
targets=0
)
)
)
)
%>%
formatStyle(colnames(tbl),backgroundColor = "ivory")
)
tbl_joined
library(crosstalk) # this package makes it possible to filter
# an object that will be shared by filter panels and datatable
shared_joined <- SharedData$new(tbl_joined, key = ~subjID, group = "shared_obj")
# to make two columns one with filter panels and one with the table
bscols(widths = c(2,10),
device = c("xs", "sm", "md", "lg"),
# filter panels. Other formats are sliders and checkboxes https://rstudio.github.io/crosstalk/using.html
list(
filter_select( id = "subjID", label = "subject",sharedData = shared_joined, group = ~subjID),
filter_checkbox("Sex","Sex",shared_joined, ~Sex, inline = FALSE)
),
# table
datatable(
shared_joined,
#filter = "top",
escape = FALSE,
rownames = FALSE,
width = "100%",
class = 'compact cell-border  hover',
extensions = c('Buttons', 'Select','ColReorder', 'Scroller',  'KeyTable'),
selection = 'none',
options = list(
pageLength = 20,
dom = 'Bfrtip',
#buttons = c('colvis','selectAll', 'selectNone', 'copy', 'csv', 'pdf'),
buttons = list(list(extend = "colvis", text = "select Columns", background='yellow'),
'selectAll', 'selectNone', 'copy', 'csv', 'pdf'),
select = list(style = 'os', items = 'row'),
scrollX = TRUE,
scrollCollapse = FALSE,
autoWidth = TRUE,
colReorder = TRUE,
columnDefs = list(
list(
keys = TRUE,
search = list(regex = TRUE),
targets=0
)
)
)
)
%>%
formatStyle(colnames(tbl),backgroundColor = "ivory")
)
library(DT)
library(crosstalk) # this package makes it possible to filter
library(DT)
# an object that will be shared by filter panels and datatable
shared_joined <- SharedData$new(tbl_joined, key = ~subjID, group = "shared_obj")
# to make two columns one with filter panels and one with the table
bscols(widths = c(2,10),
device = c("xs", "sm", "md", "lg"),
# filter panels. Other formats are sliders and checkboxes https://rstudio.github.io/crosstalk/using.html
list(
filter_select( id = "subjID", label = "subject",sharedData = shared_joined, group = ~subjID),
filter_checkbox("Sex","Sex",shared_joined, ~Sex, inline = FALSE)
),
# table
datatable(
shared_joined,
#filter = "top",
escape = FALSE,
rownames = FALSE,
width = "100%",
class = 'compact cell-border  hover',
extensions = c('Buttons', 'Select','ColReorder', 'Scroller',  'KeyTable'),
selection = 'none',
options = list(
pageLength = 20,
dom = 'Bfrtip',
#buttons = c('colvis','selectAll', 'selectNone', 'copy', 'csv', 'pdf'),
buttons = list(list(extend = "colvis", text = "select Columns", background='yellow'),
'selectAll', 'selectNone', 'copy', 'csv', 'pdf'),
select = list(style = 'os', items = 'row'),
scrollX = TRUE,
scrollCollapse = FALSE,
autoWidth = TRUE,
colReorder = TRUE,
columnDefs = list(
list(
keys = TRUE,
search = list(regex = TRUE),
targets=0
)
)
)
)
%>%
formatStyle(colnames(tbl),backgroundColor = "ivory")
)
tbl_joined$filenames
tbl_joined$pi
pic_fullpath <- file.path('https://gitlab.uzh.ch/crsuzh/afford_website/-/tree/master/Docs/contents/hub/Images',tbl_joined$filenames)
pic_relpath <- file.path('.','contents','hub',tbl_joined$filenames)
# add paths to filenames + some html code
tbl_joined$pic <- paste0('<a href=\'', pic_fullpath,'\' target=\'_blank\'>',
'<img src=\'',pic_relpath, '\' height=\'70\'></a>')
tbl_joined$pic
library(crosstalk) # this package makes it possible to filter
library(DT)
# an object that will be shared by filter panels and datatable
shared_joined <- SharedData$new(tbl_joined, key = ~subjID, group = "shared_obj")
# to make two columns one with filter panels and one with the table
bscols(widths = c(2,10),
device = c("xs", "sm", "md", "lg"),
# filter panels. Other formats are sliders and checkboxes https://rstudio.github.io/crosstalk/using.html
list(
filter_select( id = "subjID", label = "subject",sharedData = shared_joined, group = ~subjID),
filter_checkbox("Sex","Sex",shared_joined, ~Sex, inline = FALSE)
),
# table
datatable(
shared_joined,
#filter = "top",
escape = FALSE,
rownames = FALSE,
width = "100%",
class = 'compact cell-border  hover',
extensions = c('Buttons', 'Select','ColReorder', 'Scroller',  'KeyTable'),
selection = 'none',
options = list(
pageLength = 20,
dom = 'Bfrtip',
#buttons = c('colvis','selectAll', 'selectNone', 'copy', 'csv', 'pdf'),
buttons = list(list(extend = "colvis", text = "select Columns", background='yellow'),
'selectAll', 'selectNone', 'copy', 'csv', 'pdf'),
select = list(style = 'os', items = 'row'),
scrollX = TRUE,
scrollCollapse = FALSE,
autoWidth = TRUE,
colReorder = TRUE,
columnDefs = list(
list(
keys = TRUE,
search = list(regex = TRUE),
targets=0
)
)
)
)
%>%
formatStyle(colnames(tbl),backgroundColor = "ivory")
)
